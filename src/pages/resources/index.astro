---

import Layout from "../../layouts/Layout.astro";

import Navbar2 from "../../components/Navbar2.astro";

import astrixblack from "/public/assets/asterisk.png"

import mockup from "/public/assets/mockup1.jpg"

import placeholder from "/public/assets/user.jpg"

import articles from "../../data/articleData.js";

import Footer from "../../components/Footer.astro";

import { Image } from 'astro:assets'

import { carouselData } from "../../data/carouselData.js";

---





<Layout title="CX-Point">

    <div class="w-screen h-full bg-[#E7E7D6]">

        <Navbar2/>

        <div class="w-full pt-40 new stretch px-4 lg:px-16 pb-24 content">

            <div class="w-full h-full flex lg:flex-row flex-col items-start lg:items-center justify-start gap-2 lg:gap-4">

                <img src={astrixblack.src} alt="astrix" class="w-[1.5rem] lg:w-[3rem] h-auto astrix"/>

                <p class="text-2xl lg:text-[4rem] font-semibold leading-[100%]">Transformative Success:</p>

            </div>

            <p class="w-full lg:w-[56%] text-2xl lg:text-[4rem] font-semibold leading-[100%]">Inspiring Stories from Our Valued Customers</p>

        </div>

        <div class="w-full lg:px-16 pb-24 relative">

            <div class="carousel-container w-full">

                <div class="carousel-track flex transition-transform duration-500">

                    {carouselData.map((slide) => (

                        <div class="carousel-slide w-full flex-shrink-0">

                            <div class="w-full lg:h-fit h-[60vh] rounded-md lg:rounded-[100px] overflow-hidden relative">

                                <a href={`/resources/${slide.id}`}>

                                    <img src={slide.image} alt="customer" class="w-full lg:h-[90vh] h-[60vh] object-cover object-top hover:scale-105 transition-all duration-700"/>

                                    <div class="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent"></div>

                                </a>

                                <div class="absolute bottom-[8%] left-0 transform translate-y-1/2 lg:w-[40%] w-[80%] lg:h-[60%] z-40 bg-black/80 backdrop-blur-sm text-white text-center rounded-tr-2xl lg:rounded-tr-[100px] py-4 lg:py-10 px-2 lg:px-12 flex flex-col items-start justify-start gap-4" >

                                    <div class="text-sm lg:text-[2rem] font-semibold leading-[100%] text-start">

                                        {slide.title}

                                    </div>

                                    <div class="flex items-center justify-start gap-4 leading-[100%]">

                                        <img src={slide.authorImage} alt="author" class="lg:w-[4rem] w-[2rem] h-auto rounded-full"/>

                                        <div class="flex flex-col items-start justify-center">

                                            <p class="font-bold text-sm lg:text-base">{slide.authorName}</p>

                                            <p class="text-sm font-bold text-[#ADADAD]">{slide.authorRole}</p>

                                        </div>

                                    </div>

                                </div>

                            </div>

                        </div>

                    ))}

                </div>

            </div>



            <button class="carousel-button prev absolute top-1/2 left-4 transform -translate-y-1/2 bg-black bg-opacity-50 text-white p-4 rounded-full z-50">

                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">

                    <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5" />

                </svg>

            </button>

            <button class="carousel-button next absolute top-1/2 right-4 transform -translate-y-1/2 bg-black bg-opacity-50 text-white p-4 rounded-full z-50">

                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">

                    <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />

                </svg>

            </button>



            <div class="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex space-x-2 z-50">

                {carouselData.map((_, index) => (

                    <button 

                        class="carousel-dot w-3 h-3 rounded-full transition-colors duration-300"

                        data-index={index}

                        aria-label={`Go to slide ${index + 1}`}

                    ></button>

                ))}

            </div>

        </div>

        <div>

        <div class="w-full px-4 lg:px-16 pb-24">

            <p class="new text-2xl lg:text-[2rem] font-semibold stretch leading-[100%]">Latest Articles</p>

        </div>

        <div class="w-full px-4 lg:px-24 pb-24 flex flex-wrap gap-4">

            {articles.map((article, index) => (

                <a href={`/resources/${article.id}`} class="max-w-sm h-fit mx-auto bg-white hover:shadow-xl rounded-[50px] overflow-hidden shadow-lg transition-all duration-300 group ">

                    <div class=" p-6 relative py-16">

                        <div class="absolute top-4 right-4 bg-black bg-opacity-10 rounded-full p-2">

                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">

                                <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 19.5l15-15m0 0H8.25m11.25 0v11.25" />

                            </svg>

                        </div>

                        <p class="text-sm font-medium text-gray-600 mb-2">*{article.readTime} read</p>

                        <h2 class="text-2xl font-bold mb-2 leading-tight">{article.title}</h2>

                        <p class="text-gray-600 mb-4">{article.subtitle}</p>

                        <div class="flex items-center">

                            <img src={placeholder.src} alt="author" class="w-10 h-10 rounded-full mr-3">

                            <div>

                                <p class="font-semibold">{article.authorName}</p>

                                <p class="text-sm text-gray-600">{article.authorRole}</p>

                            </div>

                        </div>

                    </div>

                    <div class=" overflow-hidden">

                        <img src={article.illustrationSrc} alt="Article illustration" class="w-full h-auto group-hover:scale-110 transition-transform duration-700">

                    </div>

                </a>

            ))}

        </div>

        </div>

        <Footer/>

    </div>

</Layout>



<style>

    .new{

        font-family: 'new';

    }



    .stretch{

        font-stretch: 500%;

    }



    .carousel-container {

        overflow: hidden;

    }



    .carousel-track {

        display: flex;

        width: 100%;

        min-width: calc(100% * ${carouselData.length});

    }



    .carousel-slide {

        width: 100%;

        flex-shrink: 0;

    }



    .carousel-button {

        opacity: 0;

        transition: opacity 0.3s;

    }



    .carousel-container:hover .carousel-button {

        opacity: 1;

    }



    @media (max-width: 768px) {

        .carousel-track {

            min-width: calc(100% * var(--slide-count));

        }



        .carousel-button {

            padding: 0.75rem;

        }



        .carousel-button svg {

            width: 1rem;

            height: 1rem;

        }

    }



    .carousel-button {

        background-color: rgba(0, 0, 0, 0.7);

        backdrop-filter: blur(4px);

    }



    .carousel-slide a::after {

        content: '';

        position: absolute;

        inset: 0;

        background: linear-gradient(to top, rgba(0,0,0,0.6) 0%, transparent 100%);

        transition: opacity 0.3s ease;

    }



    .carousel-slide a:hover::after {

        opacity: 0.8;

    }



    .carousel-dot {

        background-color: #AEAC92;

    }



    .carousel-dot.active {

        background-color: #FF6D00;

        opacity: 1;

    }

</style>



<script>

    

    import { gsap } from 'gsap';

    import { ScrollTrigger } from 'gsap/ScrollTrigger';



    gsap.registerPlugin(ScrollTrigger);

    

    const t1 = gsap.timeline()



    t1.from(".navbar",{

		y:"-100%",

		duration:0.5,

		opacity:0,

	})

    t1.from(".content",{

        opacity:0,

    })

    t1.to(".astrix", {

		rotate: 360,

		repeat: -1,

		ease: "linear",

		duration: 3,

	})



    // Carousel functionality

    const track = document.querySelector('.carousel-track');

    const slides = document.querySelectorAll('.carousel-slide');

    const prevButton = document.querySelector('.carousel-button.prev');

    const nextButton = document.querySelector('.carousel-button.next');

    const dots = document.querySelectorAll('.carousel-dot');
    let currentSlide = 0;
    const slideCount = slides.length;

    function updateCarousel() {

        track.style.transform = `translateX(-${currentSlide * 100}%)`;
        dots.forEach((dot, index) => {
            if (index === currentSlide) {
                dot.classList.add('active');
                dot.style.backgroundColor = '#FF6D00';
            } else {
                dot.classList.remove('active');
                dot.style.backgroundColor = '#AEAC92';
            }
        });

    }



    function nextSlide() {

        currentSlide = (currentSlide + 1) % slideCount;

        updateCarousel();

    }



    function prevSlide() {

        currentSlide = (currentSlide - 1 + slideCount) % slideCount;

        updateCarousel();

    }



    // Event listeners

    prevButton?.addEventListener('click', prevSlide);

    nextButton?.addEventListener('click', nextSlide);

    dots.forEach((dot, index) => {

        dot.addEventListener('click', () => {

            currentSlide = index;

            updateCarousel();

        });

    });



    // Auto-play every 2 seconds

    let autoPlayInterval = setInterval(nextSlide, 2000);



    // Pause auto-play when user interacts with controls

    const pauseAutoPlay = () => {

        clearInterval(autoPlayInterval);

        // Restart auto-play after 5 seconds of no interaction

        setTimeout(() => {

            autoPlayInterval = setInterval(nextSlide, 3000);

        }, 5000);

    };



    // Add pause listeners to all interactive elements

    prevButton?.addEventListener('click', pauseAutoPlay);

    nextButton?.addEventListener('click', pauseAutoPlay);

    dots.forEach(dot => dot.addEventListener('click', pauseAutoPlay));



    // Optional: Pause on hover

    track?.addEventListener('mouseenter', () => clearInterval(autoPlayInterval));

    track?.addEventListener('mouseleave', () => {

        autoPlayInterval = setInterval(nextSlide, 2000);

    });



</script>
